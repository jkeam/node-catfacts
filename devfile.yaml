schemaVersion: 2.1.0
metadata:
  generateName: node-catfacts-
projects:
  - name: node-catfacts
    git:
      remotes:
        origin: "https://github.com/jkeam/node-catfacts.git"
      checkoutFrom:
        revision: main
components:
  - name: tools
    container:
      endpoints:
        - exposure: public
          name: nodejs
          protocol: http
          targetPort: 3000
      image: 'registry.redhat.io/devspaces/udi-rhel8@sha256:99ff1b5c541855e4cf368816c4bcdcdc86d32304023f72c4443213a4032ef05b'
      memoryLimit: 1G
      cpuLimit: 4000m
      mountSources: true
      sourceMapping: /projects
      volumeMounts:
        - name: npm
          path: /home/user/.npm
      env:
        - name: "DB_URL"
          value: "postgres://catuser:catuserpassword@localhost:5432/catfacts"
        - name: "PORT"
          value: "3000"
  - name: adminer
    container:
      image: quay.io/official-images/adminer@sha256:44397ff6d1367c0bd1293206ad08f21d4146cca9e38698ea7c2fe0bedda9f25a
      memoryLimit: 1Gi
      env:
        - name: "ADMINER_DEFAULT_SERVER"
          value: "localhost"
        - name: "ADMINER_DESIGN"
          value: "nette"
      endpoints:
        - name: dbclient
          targetPort: 8080
          exposure: public
          protocol: http
          secure: false
  - name: db
    container:
      image: registry.redhat.io/rhel9/postgresql-13:latest
      memoryLimit: 4Gi
      env:
        - name: "PGPORT"
          value: "5432"
        - name: "POSTGRESQL_USER"
          value: "catuser"
        - name: "POSTGRESQL_PASSWORD"
          value: "catuserpassword"
        - name: "POSTGRESQL_DATABASE"
          value: "catfacts"
        - name: "POSTGRESQL_MAX_PREPARED_TRANSACTIONS"
          value: "10"
        - name: "POSTGRESQL_MAX_CONNECTIONS"
          value: "10"
        - name: "POSTGRESQL_ADMIN_PASSWORD"
          value: "root"
      endpoints:
        - name: db
          targetPort: 1433
          exposure: none
          secure: false
      volumeMounts:
        - name: dbdata
          path: /var/lib/pgsql/data
  - name: dbdata
    volume:
      size: 1Gi
  - name: npm
    volume:
      size: 1G
commands:
  - exec:
      commandLine: npm install
      component: tools
      group:
        kind: build
      label: Download dependencies
      workingDir: '${PROJECTS_ROOT}/web-nodejs-sample/app'
    id: 1-dependencies
  - exec:
      commandLine: nodemon app.js
      component: tools
      group:
        kind: run
      label: Run the web app
      workingDir: '${PROJECTS_ROOT}/web-nodejs-sample/app'
    id: 2-run
  - exec:
      commandLine: npm install; nodemon app.js
      component: tools
      group:
        kind: run
      label: Run the web app (and download dependencies)
      workingDir: '${PROJECTS_ROOT}/web-nodejs-sample/app'
    id: 3-install-and-run
  - exec:
      commandLine: nodemon --inspect app.js
      component: tools
      group:
        isDefault: true
        kind: debug
      label: Run the web app (debugging enabled)
      workingDir: '${PROJECTS_ROOT}/web-nodejs-sample/app'
    id: 4-debug
  - exec:
      commandLine: 'node_server_pids=$(pgrep -fx ''.*nodemon (--inspect )?app.js'' | tr "\\n" " ") && echo "Stopping node server with PIDs: ${node_server_pids}" &&  kill -15 ${node_server_pids} &>/dev/null && echo ''Done.'''
      component: tools
      group:
        kind: run
      label: Stop the web app
    id: 5-stopapp
